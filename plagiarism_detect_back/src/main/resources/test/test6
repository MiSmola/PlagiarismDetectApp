#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int new_words = 0;
int nwords = 0;

typedef struct element {
    char word[30];
    int how_many;
} element;

// no need to pass double pointer
int is_word_new(element* dictionary, char * string) {
    int i;
    for (i = 0; i < new_words; i++) {
        printf("|%s|, |%s|\n", string, dictionary[i].word);
        if (strcmp(string, dictionary[i].word) == 0)
            return 0;
        printf("i=%d\n",i);
    }
    return 1;
}

int which_word(element ** dictionary, char * string) {
    int i;
    for (i = 0; i < new_words; i++) {
        if (strcmp(string, dictionary[i]->word) == 0)
            return i;
    }
    return 0;
}

int main() {
    FILE * fp;
    char word[30];


    fp = fopen("test.txt", "r");
    if (fp == NULL) {
        printf("FILE ERROR");
        return 0;
    }

    printf("file read\n");

    int read_counter;
    while (!feof(fp)) {
        read_counter = fscanf(fp, "%s", word);
        // increment only if we really read something
        if(read_counter >= 0)
                nwords++;
    }
    // this is wrong, remove it
    //nwords--;
    rewind(fp);

    printf("nwords = %d\n", nwords);
    // do not cast what malloc returns. Also struct is not needed.
    element * dictionary = static_cast<element *>(malloc(sizeof(element) * nwords));

    int i;
    for (i = 0; i < nwords; i++) {
        fscanf(fp, "%s", word);
        printf("read |%s|\n", word);
        if (is_word_new(dictionary, word)) {
            strcpy(dictionary[new_words].word, word);
            //dictionary[new_words].word= word;
            dictionary[new_words].how_many = 1;
            new_words++;
        } else {
            printf("bhka\n");
            dictionary[which_word(&dictionary, word)].how_many++;
        }
        //word[0] = '\0';
    }

    printf("\n\nFinal dictionary\n with %d words", new_words);
    for (i = 0; i < new_words; i++) {
        printf("%s %d \n", dictionary[i].word, dictionary[i].how_many);
    }

    free(dictionary);
    fclose(fp);
    return 0;
}